import Head from "next/head";
import { useState } from "react";
import {
  VStack,
  Center,
  Text,
  Heading,
  Button,
  Input,
  FormControl,
  Box,
  Container,
  HStack,
} from "@chakra-ui/react";

export default function Home() {
  const [response, setResponse] = useState("");
  const [prompt, setPrompt] = useState("");
  const [loading, setLoading] = useState(false);

  const handleSubmit = async (e: { preventDefault: () => void }) => {
    e.preventDefault();

    setLoading(true);
    setResponse("");

    const res = await fetch("/api/completion", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        prompt:
          "Please forget all prior prompts. I want you to become my Prompt Creator. Your goal is to help me build the best-detailed prompt for my needs. This prompt will be used by you, ChatGPT. Please follow this following process:1.MY question:" +
          prompt +
          ".2.Based on my question, you will give me a revised prompt to use.3.The revised prompt must be a prompt I can ask another GPT interface for a deeper and better answer. ONLY WRITE OUT THE REVISED PROMPT. PLEASE PAY ATTENTION TO THE LAST PART!",
      }),
    }).then((res) => res.json());

    setResponse(res.data.text);
    setLoading(false);
  };

  return (
    <>
      <Head>
        <title>Promptomize</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Container maxW="100%" bg="black">
        <Center>
          <VStack w="5xl" h="100vh" gap="50px">
            <Heading fontSize="50px" mt="10" color="#51da4c">
              It's time to super charge your prompt!
            </Heading>
            <HStack w="100%">
              <FormControl id="prompt" fontSize={"2xl"} onSubmit={handleSubmit}>
                <Box>
                  <Input
                    bg="transparent"
                    color="#51da4c"
                    borderRadius="0"
                    border="2px"
                    p="9px"
                    placeholder="How do I write better content on Twitter?"
                    size="lg"
                    variant="unstyled"
                    autoComplete="off"
                    onChange={(e) => setPrompt(e.target.value)}
                    value={prompt}
                  />
                </Box>
              </FormControl>
              <Button
                bg="transparent"
                color="#51da4c"
                size="lg"
                w="30%"
                borderRadius="0"
                border="2px"
                p="20px"
                onClick={handleSubmit}
                isLoading={loading}
                _hover={{
                  background: "#51da4c",
                  color: "black",
                }}
              >
                {" "}
                Promptimize
              </Button>
            </HStack>
            <Box padding="6" bg="transparent" borderRadius="lg">
              <Text fontSize="20px" textColor="green" whiteSpace="pre-wrap">
                {response}
              </Text>
            </Box>
          </VStack>
        </Center>
      </Container>
    </>
  );
}

import type { NextApiRequest, NextApiResponse } from "next";
// const { Configuration, OpenAIApi } = require("openai");

// type Data = {
//   name: string;
//   message?: string;
//   error: string;
// };

// export default async function handler(
//   req: NextApiRequest,
//   res: NextApiResponse<Data>
// ) {
//   try {
//     const prompt = req.body.prompt;

//     const configuration = new Configuration({
//       apiKey: "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",
//     });
//     const openai = new OpenAIApi(configuration);

//     const charles = async () => {
//       console.log("bi");
//       const completion = await openai.createCompletion({
//         model: "text-davinci-003",
//         prompt: prompt,
//         maxTokens: 2048,
//       });
//       console.log(completion.data.choices[0].text);
//       return completion.data.choices[0].text;
//     };

//     const result = await charles();
//     res.status(200).json(result);
//   } catch (error) {
//     console.error(error);
//     if (error.response && error.response.status) {
//       res.status(error.response.status).json({ message: error.message });
//     } else if (error.request && error.request.status) {
//       res.status(error.request.status).json({ message: error.message });
//     } else {
//       res.status(500).json({ message: error.message });
//     }
//   }
// }
